ARG CONTEXT=dev
ARG PYTHON_IMAGE_VERSION=3.10.15

FROM python:${PYTHON_IMAGE_VERSION}-slim-bookworm as base

ARG CONTEXT
ARG PYTHON_IMAGE_VERSION

WORKDIR /app

## Context-based setup
### Add context value as a helper env variable
ENV ${CONTEXT}=1

### Query based on context value
ENV CONTEXT_INSTALLS=${tests:+"curl"}${prod:+"cron"}${dev:+""}
ENV REQUIREMENTS_FILE=${tests:+"testing"}${prod:+"general"}${dev:+"testing"}${debug:+"testing"}

## Install

RUN apt-get -y update && apt-get -y upgrade && \
    apt-get install --no-install-recommends -y ncat gcc libpq-dev libc-dev postgresql-client redis-tools ${CONTEXT_INSTALLS}

## Requirements
COPY requirements/* scripts/system/* scripts/* ./

RUN pip install -U -r requirements-${REQUIREMENTS_FILE}.txt

ENV PYTHONPATH /app/

LABEL org.opencontainers.image.title="OpenSlides Datastore Service"
LABEL org.opencontainers.image.description="Service for OpenSlides which wraps the database, which includes reader and writer functionality."
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/OpenSlides/openslides-datastore-service"




# Testing Image

FROM base as tests


COPY scripts/* scripts/system/* tests/entrypoint.sh ./
COPY scripts/ci/* ./ci/

STOPSIGNAL SIGKILL
ENTRYPOINT ["./entrypoint.sh"]
CMD ["sleep", "inf"]



# Intermediate Image

FROM base as moduled

ARG MODULE
RUN test -n "$MODULE" || (echo "MODULE not set" && false)
ENV MODULE=$MODULE

ARG PORT
RUN test -n "$PORT" || (echo "PORT not set" && false)
ENV PORT=$PORT

EXPOSE $PORT

COPY $MODULE/entrypoint.sh ./

# Development Image

FROM moduled as dev

COPY scripts/system/* scripts/* ./


ENV FLASK_APP=datastore.$MODULE.app
ENV FLASK_DEBUG=1

ENTRYPOINT ["./entrypoint.sh"]
CMD exec python -m flask run -h 0.0.0.0 -p $PORT

HEALTHCHECK CMD python cli/healthcheck.py


# Debug Image

FROM moduled as debug


ENV FLASK_APP=datastore.$MODULE.app
ENV FLASK_DEBUG=1

ENTRYPOINT ["./entrypoint.sh"]
CMD exec python -m debugpy --listen 0.0.0.0:5678 -m flask run -h 0.0.0.0 -p $PORT --no-reload



# Production Image

FROM moduled as prod


COPY cli cli
COPY datastore datastore


COPY scripts/system/* ./

ENV NUM_WORKERS=1
ENV WORKER_TIMEOUT=30

RUN echo "20 4 * * * root /app/cron.sh >> /var/log/cron.log 2>&1" > /etc/cron.d/trim-collectionfield-tables

HEALTHCHECK CMD python cli/healthcheck.py

ENTRYPOINT ["./entrypoint.sh"]
CMD exec gunicorn -w $NUM_WORKERS -b 0.0.0.0:$PORT datastore.$MODULE.app:application -t $WORKER_TIMEOUT
